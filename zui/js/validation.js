Zui.prototype.validation=dt=>{
	// 非法名字
	const ne = ["妈", "爸", "爹", "爷", "哥", "姐", "你猜", "你猜猜", "高富帅", "白富美", "屌丝", "先生", "女士", "小姐", "操", "帅哥", "美女", "啊啊", "习近平", "奥巴马", "马化腾", "毛泽东", "尼玛", "你", "我", "阿", "草", "痴", "狗", "猫", "蛋", "主任", "老师", "师傅", "医生", "教授", "老", "猪", "呵呵", "贱", "二"];
	//百家姓数组
	const bjx = ["赵","钱","孙","李","周","吴","郑","王","冯","陈","褚","卫","蒋","沈","韩","杨","朱","秦","尤","许","何","吕","施","张","孔","曹","严","华","金","魏","陶","姜","戚","谢","邹","喻","柏","水","窦","章","云","苏","潘","葛","奚","范","彭","郎","鲁","韦","昌","马","苗","凤","花","方","俞","任","袁","柳","酆","鲍","史","唐","费","廉","岑","薛","雷","贺","倪","汤","滕","殷","罗","毕","郝","邬","安","常","乐","于","时","傅","皮","卞","齐","康","伍","余","元","卜","顾","孟","平","黄","和","穆","萧","尹","姚","邵","湛","汪","祁","毛","禹","狄","米","贝","明","臧","计","伏","成","戴","谈","宋","茅","庞","熊","纪","舒","屈","项","祝","董","梁","杜","阮","蓝","闵","席","季","麻","强","贾","路","娄","危","江","童","颜","郭","梅","盛","林","刁","锺","徐","邱","骆","高","夏","蔡","田","樊","胡","凌","霍","虞","万","支","柯","昝","管","卢","莫","经","房","裘","缪","干","解","应","宗","丁","宣","贲","邓","郁","单","杭","洪","包","诸","左","石","崔","吉","钮","龚","程","嵇","邢","滑","裴","陆","荣","翁","荀","羊","於","惠","甄","麴","家","封","芮","羿","储","靳","汲","邴","糜","松","井","段","富","巫","乌","焦","巴","弓","牧","隗","山","谷","车","侯","宓","蓬","全","郗","班","仰","秋","仲","伊","宫","宁","仇","栾","暴","甘","钭","历","戎","祖","武","符","刘","景","詹","束","龙","叶","幸","司","韶","郜","黎","蓟","溥","印","宿","白","怀","蒲","邰","从","鄂","索","咸","籍","赖","卓","蔺","屠","蒙","池","乔","阳","郁","胥","能","苍","双","闻","莘","党","翟","谭","贡","劳","逄","姬","申","扶","堵","冉","宰","郦","雍","却","璩","桑","桂","濮","牛","寿","通","边","扈","燕","冀","僪","浦","尚","农","温","别","庄","晏","柴","瞿","阎","充","慕","连","茹","习","宦","艾","鱼","容","向","古","易","慎","戈","廖","庾","终","暨","居","衡","步","都","耿","满","弘","匡","国","文","寇","广","禄","阙","东","欧","殳","沃","利","蔚","越","夔","隆","师","巩","厍","聂","晁","勾","敖","融","冷","訾","辛","阚","那","简","饶","空","曾","毋","沙","乜","养","鞠","须","丰","巢","关","蒯","相","查","后","荆","红","游","竺","权","逮","盍","益","桓","公","万俟","司马","上官","欧阳","夏侯","诸葛","闻人","东方","赫连","皇甫","尉迟","公羊","澹台","公冶","宗政","濮阳","淳于","单于","太叔","申屠","公孙","仲孙","轩辕","令狐","钟离","宇文","长孙","慕容","司徒","司空","召","有","舜","丛","岳","寸","贰","皇","侨","彤","竭","端","赫","实","甫","集","象","翠","狂","辟","典","良","函","芒","苦","其","京","中","夕","之","章佳","那拉","冠","宾","香","果","纳喇","乌雅","范姜","碧鲁","张廖","张简","图门","太史","公叔","乌孙","完颜","马佳","佟佳","富察","费莫","蹇","称","诺","来","多","繁","戊","朴","回","毓","税","荤","靖","绪","愈","硕","牢","买","但","巧","枚","撒","泰","秘","亥","绍","以","壬","森","斋","释","奕","姒","朋","求","羽","用","占","真","穰","翦","闾","漆","贵","代","贯","旁","崇","栋","告","休","褒","谏","锐","皋","闳","在","歧","禾","示","是","委","钊","频","嬴","呼","大","威","昂","律","冒","保","系","抄","定","化","莱","校","么","抗","祢","綦","悟","宏","功","庚","务","敏","捷","拱","兆","丑","丙","畅","苟","随","类","卯","俟","友","答","乙","允","甲","留","尾","佼","玄","乘","裔","延","植","环","矫","赛","昔","侍","度","旷","遇","偶","前","由","咎","塞","敛","受","泷","袭","衅","叔","圣","御","夫","仆","镇","藩","邸","府","掌","首","员","焉","戏","可","智","尔","凭","悉","进","笃","厚","仁","业","肇","资","合","仍","九","衷","哀","刑","俎","仵","圭","夷","徭","蛮","汗","孛","乾","帖","罕","洛","淦","洋","邶","郸","郯","邗","邛","剑","虢","隋","蒿","茆","菅","苌","树","桐","锁","钟","机","盘","铎","斛","玉","线","针","箕","庹","绳","磨","蒉","瓮","弭","刀","疏","牵","浑","恽","势","世","仝","同","蚁","止","戢","睢","冼","种","涂","肖","己","泣","潜","卷","脱","谬","蹉","赧","浮","顿","说","次","错","念","夙","斯","完","丹","表","聊","源","姓","吾","寻","展","出","不","户","闭","才","无","书","学","愚","本","性","雪","霜","烟","寒","少","字","桥","板","斐","独","千","诗","嘉","扬","善","揭","祈","析","赤","紫","青","柔","刚","奇","拜","佛","陀","弥","阿","素","长","僧","隐","仙","隽","宇","祭","酒","淡","塔","琦","闪","始","星","南","天","接","波","碧","速","禚","腾","潮","镜","似","澄","潭","謇","纵","渠","奈","风","春","濯","沐","茂","英","兰","檀","藤","枝","检","生","折","登","驹","骑","貊","虎","肥","鹿","雀","野","禽","飞","节","宜","鲜","粟","栗","豆","帛","官","布","衣","藏","宝","钞","银","门","盈","庆","喜","及","普","建","营","巨","望","希","道","载","声","漫","犁","力","贸","勤","革","改","兴","亓","睦","修","信","闽","北","守","坚","勇","汉","练","尉","士","旅","五","令","将","旗","军","行","奉","敬","恭","仪","母","堂","丘","义","礼","慈","孝","理","伦","卿","问","永","辉","位","让","尧","依","犹","介","承","市","所","苑","杞","剧","第","零","谌","招","续","达","忻","六","鄞","战","迟","候","宛","励","粘","萨","邝","覃","辜","初","楼","城","区","局","台","原","考","妫","纳","泉","老","清","德","卑","过","麦","曲","竹","百","福","言","第五","佟","爱","年","笪","谯","哈","墨","南宫","赏","伯","佴","佘","牟","商","西门","东门","左丘","梁丘","琴","后","况","亢","缑","帅","微生","羊舌","海","归","呼延","南门","东郭","百里","钦","鄢","汝","法","闫","楚","晋","谷梁","宰父","夹谷","拓跋","壤驷","乐正","漆雕","公西","巫马","端木","颛孙","子车","督","仉","司寇","亓官","鲜于","锺离","盖","逯","库","郏","逢","阴","薄","厉","稽","闾丘","公良","段干","开","光","操","瑞","眭","泥","运","摩","伟","铁","迮"];
	
	const ipt=$(dt.form).find('[zui-rule]');
    ipt.each(function(){
		// 拆分zui-rule
		let v=$(this).attr('zui-rule').split(',');
		let ru={};
		// 拆分的zui-rule规则重新组合到ru
		v.forEach(n=>{
			const r=n.split(':');
			if(r[0]=='rule'){
				ru.rule=r[1];
			}else if(r[0]=='required'){
				ru.required=true;
			}else if(r[0]=='length'){
				if(r[1].indexOf('~')!=-1){
					const t=r[1].split('~');
					ru.min=t[0];
					ru.max=t[1];
				}else{
					ru.leng=r[1];
				};
			};
		});
		// 绑定失去焦点事件
        $(this).blur(function(){
			// 判断校验类别、传递当前ipt和规则
			switch(ru.rule){
				case 'name': verify.name($(this),ru);
				break;
				case 'phone': verify.phone($(this),ru);
				break;
				case 'number': verify.number($(this),ru);
				break;
				case 'email': verify.email($(this),ru);
				break;
				case 'idcard': verify.idcard($(this),ru);
				break;
				default: verify.other($(this),ru);
			};
        });
	});

	// 验证大法
	const verify={
		zt:false,
		name:(n,ru)=>{
			const v=n.val();
			// 如果非必选，且值空，跳过
			if(v=='' && !ru.required) return verify.zt=true;
			// 必选是否为空
			if(v=='' && ru.required) return zui.prompts('姓名不能为空！');
			// 长度判断
			if(v.length<2 || v.length>4) return zui.prompts('姓名长度错误！');
			// 方法姓名判断
			for(let i=0;i<ne.length;i++){
				if(v.indexOf(ne[i])>=0) return zui.prompts('姓名不合法！');
			};
			// 百家姓判断
			if(bjx.indexOf(v.substr(0,1))!=-1||bjx.indexOf(v.substr(0,2))!=-1){
				verify.zt=true;
			}else{
				return zui.prompts('姓氏不存在！');
			};
		},
		phone:(n,ru)=>{},
		number:(n,ru)=>{
			var num=$num.val();
			if(isNaN(num)){
				$num.val('');
				alert('请输入正确的金额');
				return false;
			};
		},
		email:(n,ru)=>{
			const v=n.val();
			// 如果非必选，且值空，跳过
			if(v=='' && !ru.required) return verify.zt=true;
	
			// 必选是否为空
			if(v=='' && ru.required) return zui.prompts('邮箱长度不能为空！');
	
			// 长度校验
			if(ru.min && v.length<ru.min) return zui.prompts('邮箱地址长度太短！');
			if(ru.max && v.length>ru.max) return zui.prompts('邮箱地址长度超出！');
	
			// 规则校验
			const reg = /^([a-zA-Z0-9]+[_|\_|\.]?)*[a-zA-Z0-9]+@([a-zA-Z0-9]+[_|\_|\.]?)*[a-zA-Z0-9]+\.[a-zA-Z]{2,3}$/;
			if(!reg.test(v)){
				return zui.prompts('请输入有效的邮箱地址！');
			};
			return verify.zt=true;
		},
		idcard:(n,ru)=>{
			const v=n.val();
		}
	};

	// 提交按钮，触发所有blur事件，再判断验证是否全部通过
	$(dt.submit).click(()=>{
		// 启动所绑表单所有ipt的blur事件，二次验证
		ipt.trigger('blur');
		if(verify.zt){
			// 校验通关，执行函数
			dt.succeed();
		}else{
			// 校验失败
			zui.prompts('表单未填写完成，请检查！');
		};
	});
};


var IdCard={
	nunber:function(obj){
		var allowancePersonValue=obj.val();
        var indf=allowancePersonValue.substring(17);
        if(indf=='x'){
            allowancePersonValue=allowancePersonValue.substring(0,17)+'X';
        }
	 	if(allowancePersonValue==""){ 
	  		mui.toast("身份证号不能为空"); 
	  		return false; 
	 	}else if(IdCard.isCardNo(allowancePersonValue) === false){ 
	 	//校验长度，类型 
	  		mui.toast("身份证号码不正确，请重新输入"); 
	  		return false; 
	 	}else if(IdCard.checkProvince(allowancePersonValue) === false){ 
	 		//检查省份 
	  		mui.toast("身份证号码不正确,请重新输入"); 
	  		return false; 
	 	}else if(IdCard.checkBirthday(allowancePersonValue) === false){ 
	 		//校验生日 
	  		mui.toast("身份证号码不正确,请重新输入"); 
	  		return false; 
	 	}else if(IdCard.checkParity(allowancePersonValue) === false){
	 	 	//检验位的检测 
	  		mui.toast("身份证号码不正确,请重新输入"); 
	  		return false; 
	 	}else{ 
	  		return true; 
	 	} 
	},
	 
	//身份证省的编码 
	vcity:{ 
		11:"北京",12:"天津",13:"河北",14:"山西",15:"内蒙古",
	    21:"辽宁",22:"吉林",23:"黑龙江",31:"上海",32:"江苏", 
	    33:"浙江",34:"安徽",35:"福建",36:"江西",37:"山东",41:"河南", 
	    42:"湖北",43:"湖南",44:"广东",45:"广西",46:"海南",50:"重庆", 
	    51:"四川",52:"贵州",53:"云南",54:"西藏",61:"陕西",62:"甘肃", 
	    63:"青海",64:"宁夏",65:"新疆",71:"台湾",81:"香港",82:"澳门",91:"国外" 
	},
	 
	//检查号码是否符合规范，包括长度，类型 
	isCardNo:function(card){ 
	 	//身份证号码为15位或者18位，15位时全为数字，18位前17位为数字，最后一位是校验位，可能为数字或字符X 
	 	var reg = /(^\d{15}$)|(^\d{17}(\d|X)$)/; 
	 	if(reg.test(card) === false){ 
	  		return false; 
	 	} 
	 	return true; 
	},
	 
	//取身份证前两位,校验省份 
	checkProvince:function(card){ 
	 	var province = card.substr(0,2); 
	 	if(IdCard.vcity[province] == undefined){ 
	  		return false; 
	 	} 
	 	return true; 
	},
	 
	//检查生日是否正确 
	checkBirthday:function(card){ 
		var len = card.length; 
		//身份证15位时，次序为省（3位）市（3位）年（2位）月（2位）日（2位）校验位（3位），皆为数字 
	 	if(len == '15'){  
	     	var re_fifteen = /^(\d{6})(\d{2})(\d{2})(\d{2})(\d{3})$/; 
	     	var arr_data = card.match(re_fifteen); 
	     	var year = arr_data[2]; 
	     	var month = arr_data[3]; 
	     	var day = arr_data[4]; 
	     	var birthday = new Date('19'+year+'/'+month+'/'+day); 
		    return IdCard.verifyBirthday('19'+year,month,day,birthday); 
	 	}
	 	//身份证18位时，次序为省（3位）市（3位）年（4位）月（2位）日（2位）校验位（4位），校验位末尾可能为X 
	 	if(len == '18'){ 
		 	var re_eighteen = /^(\d{6})(\d{4})(\d{2})(\d{2})(\d{3})([0-9]|X)$/; 
		 	var arr_data = card.match(re_eighteen); 
		 	var year = arr_data[2]; 
		 	var month = arr_data[3]; 
		 	var day = arr_data[4]; 
		 	var birthday = new Date(year+'/'+month+'/'+day); 
		 	return IdCard.verifyBirthday(year,month,day,birthday); 
		} 
		return false; 
	},
	 
	//校验日期 
	verifyBirthday:function(year,month,day,birthday){ 
		var now = new Date(); 
		var now_year = now.getFullYear(); 
		 //年月日是否合理 
		if(birthday.getFullYear() == year && (birthday.getMonth() + 1) == month && birthday.getDate() == day){ 
		    //判断年份的范围（3岁到100岁之间) 
		    var time = now_year - year; 
		    if(time >= 3 && time <= 100){ 
		        return true; 
		    } 
		    return false; 
		} 
		return false; 
	},
	 
	//校验位的检测 
	checkParity:function(card){ 
		//15位转18位
		card = IdCard.changeFivteenToEighteen(card);
	 	var len = card.length;
		if(len == '18'){ 
			var arrInt = new Array(7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2); 
			var arrCh = new Array('1', '0', 'X', '9', '8', '7', '6', '5', '4', '3', '2');
			var cardTemp = 0, i, valnum; 
	     	for(i = 0; i < 17; i ++){ 
	         	cardTemp += card.substr(i, 1) * arrInt[i]; 
	     	} 
	     	valnum = arrCh[cardTemp % 11]; 
	    	if(valnum == card.substr(17, 1)){ 
				return true; 
			} 
			return false; 
		} 
		return false; 
	},
	 
	//15位转18位身份证号 
	changeFivteenToEighteen:function(card){ 
		if(card.length == '15'){ 
		    var arrInt = new Array(7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2); 
		    var arrCh = new Array('1', '0', 'X', '9', '8', '7', '6', '5', '4', '3', '2');
		    var cardTemp = 0, i;   
		    card = card.substr(0, 6) + '19' + card.substr(6, card.length - 6); 
		    for(i = 0; i < 17; i ++){ 
		        cardTemp += card.substr(i, 1) * arrInt[i]; 
		    } 
		    card += arrCh[cardTemp % 11]; 
		    return card; 
		} 
		return card; 
	}
}

//验证手机号
function TelYan(v){
	var reg = /^1[3|4|5|7|8][0-9]{9}$/;
	if(reg.test(v)){

	}
};
function isCnNewID(cid){  
    var arrExp = [7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2];//加权因子  
    var arrValid = [1, 0, "X", 9, 8, 7, 6, 5, 4, 3, 2];//校验码  
    if(/^/d{17}/d|x$/i.test(cid)){  
        var sum = 0, idx;  
        for(var i = 0; i < strID.length - 1; i++){  
            // 对前17位数字与权值乘积求和  
            sum += parseInt(cid.substr(i, 1), 10) * arrExp[i];  
        }  
        // 计算模（固定算法）  
        idx = sum % 11;  
        // 检验第18为是否与校验码相等  
        return arrValid[idx] == cid.substr(17, 1).toUpperCase();  
    }else{  
        return false;  
    }  
}  